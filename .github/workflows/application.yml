name: 'Application CI/CD'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'k8s/**'
      - 'Dockerfile'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            latest

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hello-world:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hello-world:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name migdal-eks-cluster --region eu-west-1

      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment
          NEW_TAG="sha-${GITHUB_SHA::7}"
          sed -i "s|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:${NEW_TAG}|" k8s/hello-world/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/hello-world/namespace.yaml
          kubectl apply -f k8s/hello-world/deployment.yaml
          kubectl apply -f k8s/hello-world/service.yaml
          
          # Wait for deployment
          kubectl rollout status deployment/hello-world -n hello-world --timeout=2m